
# DATABASE STEPS: adding items to database or to view items in the database
# type in "flask shell" to do below in the project directory (termainl)
# db.create_all() - don't need to do this when viewing
# from market import Item
# item1 = Item(name='Book1', barcode='123985473165', price=900, description='Interesting Book')
# db.session.add(item1) #adds items to session
# db.session.commit() # commits the changes to the database

# view items in the database
# type flask shell in the current project directory
# from market import db
# from market import Item
# Item.query.all()

# looping through all the items in the database in the terminal
# >>> for item in Item.query.all():
# ...   item.name
# ...   item.price
# ...   item.description
# ...   item.id
# ...   item.barcode

# using the filter_by to get the item
# filter_by returns all the objects that have price 500 so that is why you loop
# >>> for item in item.query.filter_by(price=500):
# ...   item.name

# we will create more models and routes so we should have python files for routes and models
# circular imports: bascially two files trying to import from each other which is forbidden.

# package all the files in the whole directory called market and run.py. by doing this it will import all the files
# step-by-step

# when working with python packages, you have to include one special file, __init__. before you import it, it loads
# what you want to import.

# __name__ == "main" checks if our run.py runs directly

# had a problem with the directory. can the directory with

# Get the absolute path to the current directory
# base_dir = os.path.abspath(os.path.dirname(__file__))

# Set the path to the database file inside the "market" folder
db_path = os.path.join(base_dir, 'market.db')

# main idea: package everything related to market. have one single file to execute and this file is responsible for everything




