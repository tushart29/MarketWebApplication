
# DATABASE STEPS: adding items to database or to view items in the database
# type in "flask shell" to do below in the project directory (termainl)
# db.create_all() - don't need to do this when viewing
# from market import Item
# item1 = Item(name='Book1', barcode='123985473165', price=900, description='Interesting Book')
# db.session.add(item1) #adds items to session
# db.session.commit() # commits the changes to the database

# view items in the database
# type flask shell in the current project directory
# from market import db
# from market import Item
# Item.query.all()

# looping through all the items in the database in the terminal
# >>> for item in Item.query.all():
# ...   item.name
# ...   item.price
# ...   item.description
# ...   item.id
# ...   item.barcode

# using the filter_by to get the item
# filter_by returns all the objects that have price 500 so that is why you loop
# >>> for item in item.query.filter_by(price=500):
# ...   item.name

# we will create more models and routes so we should have python files for routes and models
# circular imports: bascially two files trying to import from each other which is forbidden.

# package all the files in the whole directory called market and run.py. by doing this it will import all the files
# step-by-step

# when working with python packages, you have to include one special file, __init__. before you import it, it loads
# what you want to import.

# __name__ == "main" checks if our run.py runs directly

# had a problem with the directory. can the directory with

# Get the absolute path to the current directory
# base_dir = os.path.abspath(os.path.dirname(__file__))

# Set the path to the database file inside the "market" folder
db_path = os.path.join(base_dir, 'market.db')

# main idea: package everything related to market. have one single file to execute and this file is responsible for everything

# Relationship field: describe serval arugments to make the module understand that the user can hold Items


# db.drop_all() - will delete all the information from the database


forms.py: create classes and going to create some fields in the classes. Those fields are required fields for customers
that they can fill for registration

you have to create a secret key so that the application is secure enough for the users

request method - get method where clients requesting information to display on pages
post requrest -  affects the database of the website


# cross site request forgery - attack or steal information on database.
to protect from the above - {{form.hidden_tag()}} is here in register. generates a tocken to protect from such attacks


we want the ability to get the flash meessage from all our templates, not just the register template


______________________

I have inherited the below requried methods to do the purpose which is from flask_login import UserMixin
# Purpose: provide a user_loader call back so the flask applciation can understand. For instance, if the authentication was successful
# then each refresh, there is a different request session so that the flask application can understand if the user is logged on or not

is_authenticated
This property should return True if the user is authenticated, i.e. they have provided valid credentials. (Only authenticated users will fulfill the criteria of login_required.)

is_active
This property should return True if this is an active user - in addition to being authenticated, they also have activated their account, not been suspended, or any condition your application has for rejecting an account. Inactive accounts may not log in (without being forced of course).

is_anonymous
This property should return True if this is an anonymous user. (Actual users should return False instead.)

get_id()
This method must return a str that uniquely identifies this user, and can be used to load the user from the user_loader callback. Note that this must be a str - if the ID is natively an int or some other type, you will need to convert it to str.
______________________

{% if current_user.is_authenticated %} - in base.html
current_user -able to grab the user data because of the flask_login import
is_authenticated - able to check because of the usermixin class which we did by inheritence

created a includes directory so that the html code will be not be confusing in the market.html





